//
//  File.swift
//  File
//
//  Created by Jim Dovey on 9/13/21.
//

%{
    from gyb_utils import (autogenerated_warning)

    operators = [
        (".equal",        "Equal",        "rollHigh",   "1"),
        (".notEqual",     "NotEqual",     "{ n }",      "5"),
        (".greater",      "GreaterThan",  "rollLow",   "inputs.count - n"),
        (".greaterEqual", "GreaterEqual", "rollLow",   "inputs.count - (n-1)"),
        (".lesser",       "LessThan",     "rollHigh",   "n-1"),
        (".lesserEqual",  "LessEqual",    "rollHigh",   "n"),
    ]
}%
${autogenerated_warning()}

import XCTest
@testable import DiceRoller

class ComparisonTests: XCTestCase {
    let inputs = [1, 2, 3, 4, 5, 6]
    lazy var results = inputs.map { RollResult(value: $0) }

    func rollOne() -> Int { 1 }
    func rollHigh() -> Int { 500 }
    func rollLow() -> Int { -500 }

% for op, name, failRoll, resultCount in operators:
    func testBasic${name}Comparison() {
        for n in inputs {
            let comparison = ComparisonPoint(comparison: ${op}, value: n)
            let results = inputs.compactMap { comparison.compare($0) ? 1 : nil }
            XCTAssertEqual(results.count, ${resultCount})
        }
    }

    func testExplodesOn${name}Comparison() {
        for n in inputs {
            let comparison = ComparisonPoint(comparison: ${op}, value: n)
            let modifier = Modifiers.Explode(comparison: comparison)
            var results = self.results
            results = modifier.run(for: results, using: ${failRoll})
            XCTAssertEqual(${resultCount}, results.filter({ $0.modifierFlags == "!" }).count)
            XCTAssertEqual(results.count, inputs.count + (${resultCount}))
        }
    }

    func testCompoundsOn${name}Comparison() {
        for n in inputs {
            let comparison = ComparisonPoint(comparison: ${op}, value: n)
            let modifier = Modifiers.Explode(comparison: comparison, format: .compounding)
            var results = self.results
            results = modifier.run(for: results, using: ${failRoll})
            XCTAssertEqual(${resultCount}, results.filter({ $0.modifierFlags == "!!" }).count)
            XCTAssertEqual(results.count, inputs.count)
        }
    }

    func testPenetratesOn${name}Comparison() {
        for n in inputs {
            let comparison = ComparisonPoint(comparison: ${op}, value: n)
            let modifier = Modifiers.Explode(comparison: comparison, format: .penetrating)
            var results = self.results
            results = modifier.run(for: results, using: ${failRoll})
            XCTAssertEqual(${resultCount}, results.filter({ $0.modifierFlags == "!p" }).count)
            XCTAssertEqual(results.count, inputs.count + (${resultCount}))
        }
    }
% end
}
